datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String             @id @default(uuid())
  name          String?
  email         String             @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  passwordHash  String?
  Authenticator Authenticator[]
  tasks         Tasks[]
  categories    Categories[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  achievements  UserAchievements[]
  BadgeId       Int                @default(1)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Tasks {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      String
  dueDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  completeAt  DateTime?
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  priority    String?
  reminder    Reminders?
  note        TaskNote?
  category    Categories? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  isAchieved  Boolean     @default(false)
}

model Categories {
  id          String   @id @unique @default(cuid())
  userId      String
  name        String
  description String?
  icon        String?
  showInMenu  Boolean  @default(false)
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id])
  Tasks       Tasks[]
}

model Reminders {
  id       String   @id @default(cuid())
  remindAt DateTime
  isSent   Boolean
  task     Tasks    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   String   @unique
}

model Achievements {
  id               String             @id @default(cuid())
  name             String
  description      String
  points           Int
  badgeImageUrl    String
  isRepeatable Boolean @default(false)
  userAchievements UserAchievements[]
}

model UserAchievements {
  id            String       @id @default(cuid())
  userId        String
  achievementId String
  completeAt    DateTime
  user          User         @relation(fields: [userId], references: [id])
  achievement   Achievements @relation(fields: [achievementId], references: [id])
}

model TaskNote {
  id          String  @id @default(cuid())
  note        String
  isFavourite Boolean @default(false)
  taskId      String  @unique
  task        Tasks   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Logs {
  id       String   @id @default(cuid())
  type     String
  url      String?
  detail   String
  dateTime DateTime @default(now())
}

model Badges {
  id             Int    @id @default(autoincrement())
  badgeTitle     String
  pointsRequired Int
  badgeIconURL   String
}
